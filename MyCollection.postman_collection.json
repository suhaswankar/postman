{
	"info": {
		"_postman_id": "a1512654-3a0f-4d18-a368-792411a913b9",
		"name": "MyCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23733597"
	},
	"item": [
		{
			"name": "https://petstore.swagger.io/v2/pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// verify URL\r",
							"let url = pm.request.url.toString();\r",
							"pm.test(\"verify request url\",function(){\r",
							"    pm.expect(url).to.eql(\"https://petstore.swagger.io/v2/pet\");\r",
							"    pm.expect(url).to.include(\"v2/pet\");\r",
							"});\r",
							"\r",
							"// verify method\r",
							"pm.test(\"verify request method\", function () {\r",
							"    pm.expect(pm.request.method).to.eql(\"POST\");\r",
							"});\r",
							"\r",
							"// verify headers not null\r",
							"pm.test(\"verify request headers\",function(){\r",
							"    pm.expect(pm.request.headers).to.not.be.null\r",
							"});\r",
							"\r",
							"// verify headers not include autorization\r",
							"pm.test(\"verify authirization is null\",function(){\r",
							"    pm.expect(pm.request.headers.has(\"authirization\")).to.be.false;\r",
							"});\r",
							"\r",
							"// verify headers contains content-type\r",
							"pm.test(\"verify header has content-type\",function(){\r",
							"    pm.expect(pm.request.headers.has(\"content-type\")).to.be.true;\r",
							"});\r",
							"\r",
							"// // verify headers contains content-type has application/json\r",
							"pm.test(\"verify headers contains content-type has application/json\",function(){\r",
							"    pm.expect(pm.request.headers.get(\"content-type\")).to.be.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"//verify request contain body\r",
							"pm.test(\"verify request contain body\",function(){\r",
							"    pm.expect(pm.request.body).to.not.null;\r",
							"});\r",
							"\r",
							"//verify request body has property\r",
							"let requestbody = JSON.parse(pm.request.body.raw);\r",
							"pm.test(\"verify request body has property\",function(){\r",
							"    pm.expect(requestbody).to.have.property(\"id\");\r",
							"    pm.expect(requestbody).to.have.property(\"category\");\r",
							"    pm.expect(requestbody.category).to.have.property(\"id\");\r",
							"    pm.expect(requestbody.category).to.have.property(\"name\")\r",
							"    pm.expect(requestbody).to.have.property(\"photoUrls\");\r",
							"    pm.expect(requestbody.photoUrls[0]).to.eql(\"string\");\r",
							"    pm.expect(requestbody.tags[0]).to.have.property(\"id\");\r",
							"    pm.expect(requestbody.tags[0]).to.have.property(\"name\");\r",
							"    pm.expect(requestbody).to.have.property(\"status\");\r",
							"});\r",
							"\r",
							"// verify request body data type\r",
							"pm.test(\"verify data type of request body\",function(){\r",
							"    pm.expect(requestbody.id).to.be.a(\"number\");\r",
							"    pm.expect(requestbody.category.id).to.be.a(\"number\");\r",
							"    pm.expect(requestbody.category.name).to.be.a(\"string\");\r",
							"    pm.expect(requestbody.photoUrls).to.be.a(\"array\");\r",
							"});\r",
							"\r",
							"// verify any extra property is not available/allowed\r",
							"const allowedProps = [\"id\",\"category\",\"name\",\"photoUrls\",\"tags\",\"status\"];\r",
							"pm.test(\"verify no extra property\", function () {\r",
							"    Object.keys(requestbody).forEach(key => {\r",
							"       if(pm.expect(allowedProps).to.include(key)){\r",
							"           pm.response.to.have.status(200);\r",
							"       }\r",
							"       else{\r",
							"        pm.expect.fail(\"extra property found test failed\");\r",
							"       }\r",
							"    });\r",
							"});\r",
							"\r",
							"//verify response status code 200\r",
							"pm.test(\"verify response status code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//verify response time is less than 5s\r",
							"pm.test(\"verify response time is less than 5s\",function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// verify response body has property\r",
							"var responsebody = pm.response.json();\r",
							"pm.test(\"verify responsebody has property\",function(){\r",
							"    pm.expect(responsebody).to.have.property(\"id\");\r",
							"    pm.expect(responsebody).to.have.property(\"category\");\r",
							"    pm.expect(responsebody.category).to.have.property(\"id\");\r",
							"    pm.expect(responsebody.category).to.have.property(\"name\");\r",
							"    pm.expect(responsebody).to.have.property(\"name\");\r",
							"    pm.expect(responsebody).to.have.property(\"photoUrls\");\r",
							"    pm.expect(responsebody).to.have.property(\"tags\");\r",
							"    pm.expect(responsebody.tags[0]).to.have.property(\"id\");\r",
							"    pm.expect(responsebody.tags[0]).to.have.property(\"name\");\r",
							"    pm.expect(responsebody).to.have.property(\"status\")\r",
							"});\r",
							"\r",
							"// verify response body have values\r",
							"pm.test(\"verify response body have proper values\",function(){\r",
							"    pm.expect(responsebody.id).to.not.null;\r",
							"    pm.expect(responsebody.category.id).to.be.eql(0);\r",
							"    pm.expect(responsebody.category.name).to.be.eql(\"string\");\r",
							"    pm.expect(responsebody.name).to.be.eql(\"doggie\");\r",
							"    pm.expect(responsebody.photoUrls[0]).to.be.eql(\"string\");\r",
							"    pm.expect(responsebody.tags[0].id).to.be.eql(0);\r",
							"    pm.expect(responsebody.tags[0].name).to.be.eql(\"string\");\r",
							"    pm.expect(responsebody.status).to.be.eql(\"available\");\r",
							"});\r",
							"\r",
							"//verify respose body data type\r",
							"pm.test(\"verify respose body data type\",function(){\r",
							"    pm.expect(responsebody.id).to.be.a(\"number\");\r",
							"    pm.expect(responsebody.category.id).to.be.a(\"number\");\r",
							"    pm.expect(responsebody.category.name).to.be.a(\"string\");\r",
							"    pm.expect(responsebody.name).to.be.a(\"string\");\r",
							"    pm.expect(responsebody.photoUrls).to.be.a(\"array\");\r",
							"    pm.expect(responsebody.tags).to.be.a(\"array\");\r",
							"    pm.expect(responsebody.tags[0].id).to.be.a(\"number\");\r",
							"    pm.expect(responsebody.tags[0].name).to.be.a(\"string\");\r",
							"    pm.expect(responsebody.status).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// verify json schema of response body\r",
							"var jsonschema = {\r",
							"\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"photoUrls\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"tags\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"name\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"category\",\r",
							"    \"name\",\r",
							"    \"photoUrls\",\r",
							"    \"tags\",\r",
							"    \"status\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"verify response body json schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(jsonschema);\r",
							"    \r",
							"});\r",
							"\r",
							"// validate response header properties\r",
							"pm.test(\"verify response header has property\",function(){\r",
							"    pm.expect(pm.response.headers.has(\"content-type\")).to.be.true;\r",
							"    pm.expect(pm.response.headers.has(\"date\")).to.be.true;\r",
							"});\r",
							"\r",
							"// verify response header have value\r",
							"pm.test(\"verify response header have proper values\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"content-type\")).to.be.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"// negative test cases\r",
							"\r",
							"// verify if URL is wrong then user get 404 status code\r",
							"pm.test(\"verify if URL is wrong then user get 404 status code\",function(){\r",
							"\r",
							"\r",
							"    if(url !== \"https://petstore.swagger.io/v2/pet\"){\r",
							"        pm.expect(pm.response.code).to.be.eql(404)\r",
							"    }else {\r",
							"        pm.expect.fail(\"URL is correct, skipping this test\");\r",
							"    }\r",
							"});\r",
							"\r",
							"//verify if response body mising any property the user get 404 status code \r",
							"var responseprop = [\"id\",\"category\",\"name\",\"photoUrls\",\"tags\",\"status\"];\r",
							"pm.test(\"verify if response body missing property user get 404 status code\",function(){\r",
							"    var keys = Object.keys(responseprop);\r",
							"\r",
							"    keys.forEach(key => {\r",
							"        pm.expect(responseprop, \"extra property present\"+keys).to.include(key);\r",
							"    });\r",
							"    keys.forEach(prop => {\r",
							"        pm.expect(kesy ,\" missing property\" + keys).to.include(prop);\r",
							"    });\r",
							"});\r",
							"\r",
							"//verify if content type is missing then get 404 code\r",
							"pm.test(\"verify content-type is missing then get 404 code\",function(){\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"\r",
							"    if(content === undefined){\r",
							"        pm.expect(pm.response.code).to.eql(415);\r",
							"    }\r",
							"    else{\r",
							"        pm.expect.fail(\"content-type is correct \"+ content);\r",
							"    }\r",
							"});\r",
							"\r",
							"// *****************************************************************************\r",
							"\r",
							"// verify case sensitive of request body\r",
							"pm.test(\"verify case sensitive of request body\",function(){\r",
							"    pm.expect(Object.keys(requestbody)).to.eql([\"id\",\"category\",\"name\",\"photoUrls\",\"tags\",\"status\"]);\r",
							"});\r",
							"\r",
							"// validate length of id\r",
							"pm.test(\"validate range of id\",function(){\r",
							"    pm.expect(responsebody.id).to.be.within(1, 9223372036854775807); \r",
							"    //or\r",
							"    pm.expect(responsebody.id.toString().length).to.be.at.most(19);\r",
							"});\r",
							"\r",
							"// validate json parse\r",
							"pm.test(\"validate json pasrsing\",function(){\r",
							"    pm.expect(function(){\r",
							"        JSON.parse(pm.response.text());\r",
							"    }).to.not.throw();\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://petstore.swagger.io/v2/pet' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}'"
			},
			"response": []
		}
	]
}