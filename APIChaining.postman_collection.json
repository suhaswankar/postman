{
	"info": {
		"_postman_id": "df3a68fc-de9b-4b3a-9708-b28bf035659e",
		"name": "API Chaining",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23733597",
		"_collection_link": "https://planetary-sunset-379118.postman.co/workspace/Suhas~b887e8a7-da1d-461d-8597-9711093a0a36/collection/23733597-df3a68fc-de9b-4b3a-9708-b28bf035659e?action=share&source=collection_link&creator=23733597"
	},
	"item": [
		{
			"name": "post_accesstoken_postitive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
							"\r",
							"// request related test cases\r",
							"\r",
							"//1) verify request url \r",
							"var url = pm.request.url.toString();\r",
							"pm.test(\"1 verify request url\",function(){\r",
							"    pm.expect(url).to.eql(\"https://simple-books-api.glitch.me/api-clients\")\r",
							"    pm.expect(url).to.include(\"api-clients\")\r",
							"});\r",
							"\r",
							"//2) verify request method\r",
							"pm.test(\"2 verify request method is POST\",function(){\r",
							"    pm.expect(pm.request.method).to.eql(\"POST\");\r",
							"});\r",
							"\r",
							"// verify request header\r",
							"var reqHeaders = pm.request.headers;\r",
							"pm.test(\"3 verify request header having content-type\",function(){\r",
							"    pm.expect(reqHeaders.has(\"Content-Type\")).to.be.true;\r",
							"    pm.expect(reqHeaders.get(\"Content-Type\")).to.not.empty;\r",
							"    pm.expect(reqHeaders.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"// verify request body\r",
							"var reqbody = JSON.parse(pm.request.body.raw);\r",
							"pm.test(\"4 verify request body have mandatory field\",function(){\r",
							"    pm.expect(reqbody).to.have.property(\"clientName\");\r",
							"    pm.expect(reqbody).to.have.property(\"clientEmail\");\r",
							"    \r",
							"});\r",
							"\r",
							"// verify request body mandatory field value\r",
							"var reqval = Object.keys(reqbody);\r",
							"var filed = [\"clientName\", \"clientEmail\"]\r",
							"pm.test(\"5 verify all filed\",function(){\r",
							"    pm.expect(reqval).to.eql(filed);\r",
							"});\r",
							"\r",
							"// verify requst body not empty\r",
							"pm.test(\"6 verify request body not empty\", function () {\r",
							"    pm.expect(reqbody).to.not.empty;\r",
							"    pm.expect(reqbody.clientName).to.not.empty;\r",
							"    pm.expect(reqbody.clientEmail).to.not.empty;\r",
							"});\r",
							"\r",
							"// verify requesy body is string form\r",
							"pm.test(\"7 verify request body is string form\", function () {\r",
							"    pm.expect(reqbody.clientName).to.be.a(\"String\");\r",
							"    pm.expect(reqbody.clientEmail).to.be.a(\"String\");\r",
							"});\r",
							"\r",
							"// verify response body  \r",
							"var resbody= pm.response.json();\r",
							"pm.test(\"8 verify response body is present\", function () {\r",
							"    pm.expect(resbody).to.not.empty;\r",
							"});\r",
							"\r",
							"// verify response body property value is object\r",
							"pm.test(\"9 verify response body property value is object\",function(){\r",
							"    pm.expect(resbody).to.be.an('object');\r",
							"});\r",
							"\r",
							"// verify response body property \r",
							"pm.test(\"10 verify response body property\", function () {\r",
							"    pm.expect(resbody).to.have.property(\"accessToken\");\r",
							"});\r",
							"// verify response body property in not empty\r",
							"pm.test(\"11 verify response body property in not empty\",function(){\r",
							"    pm.expect(resbody.accessToken).to.not.empty;\r",
							"});\r",
							"//verify response body property value is in string\r",
							"pm.test(\"12 verify response body property is in string\",function(){\r",
							"    pm.expect(resbody.accessToken).to.be.a(\"String\");\r",
							"});\r",
							"\r",
							"// verify length of response body token length\r",
							"pm.test(\"13 verify length of access token is 64\",function(){\r",
							"    pm.expect(resbody.accessToken).to.have.lengthOf(64)\r",
							"});\r",
							"\r",
							"// verify response body include only accesstoken\r",
							"var reskey = Object.keys(resbody)\r",
							"var resfield = [\"accessToken\"]\r",
							"pm.test(\"14 verify response body include only accesstoken\",function(){\r",
							"    pm.expect(reskey).to.eql(resfield);\r",
							"});\r",
							"\r",
							"// verify response cookies is empty\r",
							"pm.test(\"15 verify response cookies must be empty\",function(){\r",
							"    pm.expect(pm.response.cookies.count()).to.eql(0);\r",
							"});\r",
							"\r",
							"//verify response header property\r",
							"pm.test(\"16 verify response header contain Content-type\",function(){\r",
							"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;\r",
							"}); \r",
							"\r",
							"//verify reposne header content-type has value\r",
							"pm.test(\"17 verify reposne header content-type has value\",function(){\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
							"});\r",
							"\r",
							"//verify reposne header has Date and its value\r",
							"pm.test(\"18 verify reposne header has Date and its value\",function(){\r",
							"    pm.expect(pm.response.headers.has(\"date\")).to.be.true;\r",
							"    pm.expect(pm.response.headers.get(\"Date\")).to.not.empty;\r",
							"});\r",
							"\r",
							"//verify response status code\r",
							"pm.test(\"19 verify response status code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"// verify response time\r",
							"pm.test(\"20 response time is less than 200ms\", function () {\r",
							"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"//verify response size\r",
							"pm.test(\"21 verify responsem size\",function(){\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n  \"clientName\": \"{{$randomUserName}}\",\r\n  \"clientEmail\": \"{{$randomEmail}}\"\r\n}\r\n// accepting invalid request body",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients"
					]
				},
				"description": "Generated from cURL: curl --location 'https://simple-books-api.glitch.me/api-clients' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n  \"clientName\": \"goppal\",\r\n  \"clientEmail\": \"goppa32@gmai.com\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "post_orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"orderId\", pm.response.json().orderId);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"{{$randomUserName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.click/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"click"
					],
					"path": [
						"orders"
					]
				},
				"description": "Generated from cURL: curl --location 'https://simple-books-api.glitch.me/orders' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Authorization: Bearer 00f4ba32b22b39651f443ebde074bcacc2e2de0729c90b7712e7c3c11e3797aa' \\\r\n--data '{\r\n  \"bookId\": 2,\r\n  \"customerName\": \"johnny\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "get_orders",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://simple-books-api.click/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"click"
					],
					"path": [
						"orders"
					]
				},
				"description": "Generated from cURL: curl --location 'https://simple-books-api.glitch.me/orders' \\\r\n--header 'Authorization: Bearer 31ae8ef584ec27d74b525cfcb9436b4482d6c23b989ee56573bf5cb5b939e494'"
			},
			"response": []
		},
		{
			"name": "post_accesstoken_negativeTC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  verify if requst url is wrong use get 400 code\r",
							"var url = pm.request.url.toString();\r",
							"pm.test(\"1 verify if requst url is wrong use get 400 code\", function () {\r",
							"    if (pm.url !== \"https://simple-books-api.glitch.me/api-clients\") {\r",
							"        pm.expect(pm.response.code).to.eql(404);\r",
							"    }\r",
							"});\r",
							"\r",
							"// verify requst url path param is wrong then get 404 code\r",
							"pm.test(\"2 verify requst url path param is wrong then get 404 code\", function () {\r",
							"    if (pm.expect(url).to.not.include(\"api-clients\")) {\r",
							"        pm.expect(pm.response.code).to.eql(404);\r",
							"    }\r",
							"});\r",
							"\r",
							"// verify if requst method is wrong user get 405 code\r",
							"pm.test(\"3 verify if requst method is wrong user get 405 code\", function () {\r",
							"    if (pm.request.method = 'GET') {\r",
							"        pm.expect(pm.response.code).to.eql(403);\r",
							"    }\r",
							"});\r",
							"\r",
							"//verify url is empty then get 404 code\r",
							"pm.test(\"4 verify if request url is empty user get 404 code\", function () {\r",
							"    pm.expect(url === null || url === \"\").to.be.true;\r",
							"    pm.expect(pm.response.code).to.eql(404);\r",
							"\r",
							"});\r",
							"\r",
							"var reqhead = pm.request.headers;\r",
							"// verify if requst header content-type is empty then user get 400 code\r",
							"pm.test(\"5 verify if requst header content-type is missing\", function () {\r",
							"    var content = reqhead.get(\"Content-Type\");\r",
							"    \r",
							"    if (!content && pm.response.code === 201) {\r",
							"        // Header missing AND API returned 201 → fail test\r",
							"        pm.expect.fail(\"API returned 201 even though Content-Type header is missing. This is incorrect behavior.\");\r",
							"    } else {\r",
							"        // Optional: pass other cases\r",
							"        pm.expect(true).to.be.true;\r",
							"    }\r",
							"    \r",
							"});\r",
							"\r",
							"// verify if requst header content-type is wrong then user get 400 code\r",
							"pm.test(\"6 verify if requst header content-type is wrong then still user get 201 code\",function(){\r",
							"   if(reqhead.get(\"Content-Type\") !== \"application/json\"){\r",
							"       pm.expect(pm.response.code).to.eql(400);\r",
							"   }else{\r",
							"    pm.expect.fail(\"Content-Type is correct; test should fail because header is not wrong \"+ reqhead)\r",
							"   }\r",
							"});\r",
							"\r",
							"// verify request body is wrong user get 400 code\r",
							"var reqbody = pm.request.body.toString();\r",
							"var allfield = [\"clientName\",\"clientEmail\"];\r",
							"var allkey = Object.keys(reqbody);\r",
							"pm.test(\"7 verify if requst body is wrong then user get 400 code\", function () {\r",
							"    pm.expect(allfield).to.not.eql(allkey)\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"    \r",
							"});\r",
							"\r",
							"// verify if user passed number in place of string user get 400 status code\r",
							"pm.test(\"8 verify if user passed number in place of string user get 400 status code\",function(){\r",
							"   if(pm.expect(reqbody.clientName).to.not.be.a('string')){\r",
							"       pm.expect(pm.response.code).to.eql(400);\r",
							"   }\r",
							"});\r",
							"\r",
							"// verify if resposne time more than 5000s \r",
							"pm.test(\"9 verify if response time is more than 5000ms\", function () {\r",
							"    if(pm.response.responseTime>=5000){\r",
							"        pm.expect(pm.response.code).to.not.eql(500);\r",
							"    }else{\r",
							"        pm.expect.fail(\"resposne time is under 5s \")\r",
							"    }\r",
							"});\r",
							"\r",
							"// verify if resposne size more than 1000B\r",
							"pm.test(\"10 verify if response size is more than 1000B\", function () {\r",
							"    if(pm.response.responseSize >1000){\r",
							"        pm.response.to.have.status(500)\r",
							"    }else{\r",
							"        pm.expect.fail(\"resposnne size is under 1byte\")\r",
							"    }\r",
							"});\r",
							"\r",
							"// verify if response header content-type id wrong then faile the TC\r",
							"pm.test(\"11 verify if response header content-type is wrong then faile the TC\", function (){ \r",
							"    var contenttype = pm.response.headers.get(\"Content-Type\");\r",
							"    if (contenttype !== \"application/json\") {\r",
							"        pm.response.to.have.status(201);\r",
							"    }else{\r",
							"        pm.expect.fail(\"content-type is different \"+ contenttype)\r",
							"    }\r",
							"      \r",
							"});\r",
							"\r",
							"//Authorization / Bearer token missing or invalid\r",
							"pm.test(\"12 verify if response body is wrong then fail the TC\", function () {\r",
							"    if (!resbody.body.get(\"Authorization\") && resbody.body.get(\"Authorization\") === \"\") {\r",
							"        pm.expect(pm.response.code).to.have.status([401,403])\r",
							"    }\r",
							"});\r",
							"\r",
							"//Mandatory fields missing in request body\r",
							"pm.test(\"13 verify if mandatory fields are empty in request body\", function () {\r",
							"\r",
							"    var var1 = !reqbody.clientEmail || reqbody.clientEmail === \"\";\r",
							"    var var2 = !reqbody.clientName || reqbody.clientName === \"\"\r",
							"    if (var1 || var2) {\r",
							"        pm.expect([400,401,403]).to.include(pm.response.code);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// Invalid field formats\r",
							"pm.test(\"14 verify Invalid  email field formats\",function(){\r",
							"\r",
							"    var format = reqbody.clientEmail\r",
							"    if(!format || format.include(\"@gmail.com\")){\r",
							"        pm.response.to.have.status(400)\r",
							"    }\r",
							"});\r",
							"\r",
							"// verify reponse body is not empty\r",
							"\r",
							"var resbody = pm.response.json();\r",
							"pm.test(\"15 verify reponse body is not empty\",function(){\r",
							"    if(!resbody || Object.keys(resbody).length ===0){\r",
							"       pm.expect.fail(\"repsone body is no empty\")\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n  \"clientName\": \"{{$randomFullName}}\",\r\n  \"clientEmail\":\"{{$randomEmail}}\"\r\n \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients"
					]
				},
				"description": "Generated from cURL: curl --location 'https://simple-books-api.glitch.me/api-clients' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '\r\n{\r\n  \"clientName\": \"Madisyn.Barton\",\r\n  \"clientEmail\": \"Janice_Reichert@gmail.com\"\r\n}\r\n'"
			},
			"response": []
		},
		{
			"name": "getsinglebokkindiByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"bookId\", pm.response.json().bookId)"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.click/orders/{{orderId}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"click"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				},
				"description": "Generated from cURL: curl --location 'https://simple-books-api.glitch.me/books/null'"
			},
			"response": []
		},
		{
			"name": "getdetailsbyBokId",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 31ae8ef584ec27d74b525cfcb9436b4482d6c23b989ee56573bf5cb5b939e494",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://simple-books-api.click/orders/{{bookId}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"click"
					],
					"path": [
						"orders",
						"{{bookId}}"
					]
				},
				"description": "Generated from cURL: curl --location 'https://simple-books-api.glitch.me/orders/6iZQ4zUk66EcVmtUr5oZa' \\\r\n--header 'Authorization: Bearer 31ae8ef584ec27d74b525cfcb9436b4482d6c23b989ee56573bf5cb5b939e494'"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}