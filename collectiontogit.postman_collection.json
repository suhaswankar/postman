{
	"info": {
		"_postman_id": "610d2174-9872-48df-9cab-03cf899844cb",
		"name": "collectiontogit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23733597",
		"_collection_link": "https://planetary-sunset-379118.postman.co/workspace/Suhas~b887e8a7-da1d-461d-8597-9711093a0a36/collection/23733597-610d2174-9872-48df-9cab-03cf899844cb?action=share&source=collection_link&creator=23733597"
	},
	"item": [
		{
			"name": "PostToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
							"\r",
							"// request related test cases\r",
							"\r",
							"//1) verify request url \r",
							"var url = pm.request.url.toString();\r",
							"pm.test(\"1 verify request url\",function(){\r",
							"    pm.expect(url).to.eql(\"https://simple-books-api.glitch.me/api-clients\")\r",
							"    pm.expect(url).to.include(\"api-clients\")\r",
							"});\r",
							"\r",
							"//2) verify request method\r",
							"pm.test(\"2 verify request method is POST\",function(){\r",
							"    pm.expect(pm.request.method).to.eql(\"POST\");\r",
							"});\r",
							"\r",
							"// verify request header\r",
							"var reqHeaders = pm.request.headers;\r",
							"pm.test(\"3 verify request header having content-type\",function(){\r",
							"    pm.expect(reqHeaders.has(\"Content-Type\")).to.be.true;\r",
							"    pm.expect(reqHeaders.get(\"Content-Type\")).to.not.empty;\r",
							"    pm.expect(reqHeaders.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"// verify request body\r",
							"var reqbody = JSON.parse(pm.request.body.raw);\r",
							"pm.test(\"4 verify request body have mandatory field\",function(){\r",
							"    pm.expect(reqbody).to.have.property(\"clientName\");\r",
							"    pm.expect(reqbody).to.have.property(\"clientEmail\");\r",
							"    \r",
							"});\r",
							"\r",
							"// verify request body mandatory field value\r",
							"var reqval = Object.keys(reqbody);\r",
							"var filed = [\"clientName\", \"clientEmail\"]\r",
							"pm.test(\"5 verify all filed\",function(){\r",
							"    pm.expect(reqval).to.eql(filed);\r",
							"});\r",
							"\r",
							"// verify requst body not empty\r",
							"pm.test(\"6 verify request body not empty\", function () {\r",
							"    pm.expect(reqbody).to.not.empty;\r",
							"    pm.expect(reqbody.clientName).to.not.empty;\r",
							"    pm.expect(reqbody.clientEmail).to.not.empty;\r",
							"});\r",
							"\r",
							"// verify requesy body is string form\r",
							"pm.test(\"7 verify request body is string form\", function () {\r",
							"    pm.expect(reqbody.clientName).to.be.a(\"String\");\r",
							"    pm.expect(reqbody.clientEmail).to.be.a(\"String\");\r",
							"});\r",
							"\r",
							"// verify response body  \r",
							"var resbody= pm.response.json();\r",
							"pm.test(\"8 verify response body is present\", function () {\r",
							"    pm.expect(resbody).to.not.empty;\r",
							"});\r",
							"\r",
							"// verify response body property value is object\r",
							"pm.test(\"9 verify response body property value is object\",function(){\r",
							"    pm.expect(resbody).to.be.an('object');\r",
							"});\r",
							"\r",
							"// verify response body property \r",
							"pm.test(\"10 verify response body property\", function () {\r",
							"    pm.expect(resbody).to.have.property(\"accessToken\");\r",
							"});\r",
							"// verify response body property in not empty\r",
							"pm.test(\"11 verify response body property in not empty\",function(){\r",
							"    pm.expect(resbody.accessToken).to.not.empty;\r",
							"});\r",
							"//verify response body property value is in string\r",
							"pm.test(\"12 verify response body property is in string\",function(){\r",
							"    pm.expect(resbody.accessToken).to.be.a(\"String\");\r",
							"});\r",
							"\r",
							"// verify length of response body token length\r",
							"pm.test(\"13 verify length of access token is 64\",function(){\r",
							"    pm.expect(resbody.accessToken).to.have.lengthOf(64)\r",
							"});\r",
							"\r",
							"// verify response body include only accesstoken\r",
							"var reskey = Object.keys(resbody)\r",
							"var resfield = [\"accessToken\"]\r",
							"pm.test(\"14 verify response body include only accesstoken\",function(){\r",
							"    pm.expect(reskey).to.eql(resfield);\r",
							"});\r",
							"\r",
							"// verify response cookies is empty\r",
							"pm.test(\"15 verify response cookies must be empty\",function(){\r",
							"    pm.expect(pm.response.cookies.count()).to.eql(0);\r",
							"});\r",
							"\r",
							"//verify response header property\r",
							"pm.test(\"16 verify response header contain Content-type\",function(){\r",
							"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;\r",
							"}); \r",
							"\r",
							"//verify reposne header content-type has value\r",
							"pm.test(\"17 verify reposne header content-type has value\",function(){\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
							"});\r",
							"\r",
							"//verify reposne header has Date and its value\r",
							"pm.test(\"18 verify reposne header has Date and its value\",function(){\r",
							"    pm.expect(pm.response.headers.has(\"date\")).to.be.true;\r",
							"    pm.expect(pm.response.headers.get(\"Date\")).to.not.empty;\r",
							"});\r",
							"\r",
							"//verify response status code\r",
							"pm.test(\"19 verify response status code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"// verify response time\r",
							"pm.test(\"20 response time is less than 200ms\", function () {\r",
							"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"//verify response size\r",
							"pm.test(\"21 verify responsem size\",function(){\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"clientName\": \"{{$randomUserName}}\",\r\n  \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		}
	]
}